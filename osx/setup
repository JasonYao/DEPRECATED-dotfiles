#!/usr/bin/env bash

##
# OSX specific setup
##
source ../bin/helper

number_of_spaces=3
motd_file="/etc/motd"

# Symlinks all files
install_dotfiles

# Sets up message of the day tailing
	if [ -f "$motd_file" ]; then
		success "MotD: Symlink is already installed"
	else
		if sudo ln -s "$HOME"/.motd /etc/motd ; then
			success "MotD: Symlink is now installed"
		else
			fail "MotD: Symlink failed to be created"
		fi
	fi

# Checks for OSX defaults
	if "$dotfiles_directory"/osx/set-defaults ; then
		success "OSX: Sane defaults installed"
	else
		fail "OSX: Failed to set sane defaults"
	fi

# Homebrew status check
	info "Homebrew: Checking brew status"
	if [[ $(which brew) == "" ]]; then
		info "Homebrew: Not found, installing now"
		if echo "\r" | /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" ; then
			success "Homebrew: Successfully now installed"
		else
			fail "Homebrew: Failed to install"
		fi
	fi

# GNU Bash 4+ check due to using associative arrays
	if [[ $(which bash) == "/bin/bash" ]]; then
		info "Homebrew: Installing latest bash now"
		if brew install bash ; then
			success "Homebrew: Latest bash is now installed"
		else
			fail "Homebrew: Latest bash failed to be installed"
		fi
	fi

# Homebrew dependency check
	info "Homebrew: Checking dependencies status"
	if "$dotfiles_directory"/osx/homebrew/dependencies ; then
		success "Homebrew: All dependencies are installed"
	else
		fail "Homebrew: Some dependencies failed to be installed"
	fi

# Homebrew cask check
	info "Homebrew Casks: Checking cask applications status"
	if "$dotfiles_directory"/osx/homebrew/casks ; then
		success "Homebrew Casks: All cask applications are installed"
	else
		fail "Homebrew Casks: Some cask applications failed to be installed"
	fi

# Development environment check
	info "Dev Env: Checking environment status"
	if "$dotfiles_directory"/common/dev-setup; then
		success "Dev Env: All environments are installed and ready"
	else
		fail "Dev Env: Failed to install some environments correctly"
	fi

# iTerm environment check
	info "iTerm: Checking terminal status"
	if "$dotfiles_directory"/osx/terminal/setup; then
		success "Terminal: All terminal defaults are set"
	else
		fail "Terminal: Some terminal defaults failed to be set"
	fi

# Sets up background images
	info "Background Image: Checking background image status"
	# Note the enclosing single quotes around bash variables when trying to use them in applescripts
	if osascript -e 'tell application "System Events" to set picture of every desktop to ("'$dotfiles_directory'/img/background1.png" as POSIX file as alias)' ; then
		success "Background: Desktop image is now correctly set"
	else
		fail "Background: Desktop image failed to be set"
	fi

# Sets up designated spaces
	warn "Spaces: This setup is broken on macOS Sierra, please wait for a patch to fix this issue"
	#	info "Spaces: Checking for $number_of_spaces spaces"
	#	if [[ $(defaults read com.apple.spaces | grep name | wc -l) < $number_of_spaces ]]; then
	#		info "Spaces: Currently only $(defaults read com.apple.spaces | grep name | wc -l) spaces are set up, adding now"
	#		while [[ $(defaults read com.apple.spaces | grep name | wc -l) < $number_of_spaces ]]; do
	#			if osascript $HOME/.dotfiles/osx/scripts/add_space &> /dev/null; then
	#				success "Spaces: $(defaults read com.apple.spaces | grep name | wc -l) spaces now setup"
	#			else
	#				fail "Spaces: Failed to setup spaces, please check accessability to see if iTerm has control permissions"
	#			fi
	#		done
	#	else
	#		success "Spaces: $number_of_spaces spaces are already set up"
	#	fi
