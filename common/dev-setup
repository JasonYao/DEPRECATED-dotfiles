#!/usr/bin/env bash

##
# Actual dev environment setup
##

# Python env stuff
	python_versions=(3.6.1 2.7.13)

# Ruby env stuff
	ruby_versions=(2.4.1)

# Python check and set
	if [[ $(which pyenv) == "" ]] && [[ $(uname -s) == "Linux" ]]; then
		export PYENV_ROOT=/home/$username/.pyenv
		export PATH="$PYENV_ROOT/bin:$PATH"
	fi

	for version in "${python_versions[@]}"; do
		if [[ $(pyenv versions | grep "${version}") == "" ]]; then
			info "Pyenv: Python version ${version} is not installed yet, installing now"

			# Checks if pyenv has the correct version first
			info "Pyenv: Checking for python version ${version}"
			if [[ $(pyenv install --list | grep "${version}") == "" ]]; then
				fail "Pyenv: Python version ${version} was not found, please check it is valid and pyenv is up to date"
			else
				success "Pyenv: Python version ${version} was found"
			fi

			# Runs through normal install if possible, using CFlag if not
			info "Pyenv: Attempting normal install"
			if pyenv install "${version}" &> /dev/null ; then
				success "Pyenv: Python version ${version} is now installed"
			else
				warn "Pyenv: Python version ${version} failed to install, attempting to run with CFlags"
				if CFLAGS="-I$(xcrun --show-sdk-path)/usr/include" pyenv install "${version}" &> /dev/null ; then
					success "Pyenv: Python version ${version} is now installed"
				else
					fail "Pyenv: Python version ${version} failed to install"
				fi
			fi
		else
			success "Pyenv: Python version ${version} is already installed"
		fi
	done

# Java check and set
	if [[ $(uname -s) != "Darwin" ]]; then
		if [[ $(which javac) == "" ]]; then
			info "Java: Version 8 JDK was not installed, installing now"
			# Installs Java for unix
			sudo apt-get install -y default-jdk &> /dev/null # Ain't shit just dandy
			success "Java: Version 8 JDK is now installed"
		else
			success "Java: Version 8 JDK is already installed"
		fi
	fi

# Ruby check and set
	# Checks to see rbenv is in the correct PATH
	if [[ $(which rbenv) == "" ]] && [[ $(uname -s) == "Linux" ]]; then
		export PATH="/home/$username/.rbenv/bin:$PATH"
		export RBENV_ROOT=/home/$username/.rbenv
	fi

	# Checks to see if rbenv is initialised
	if which rbenv > /dev/null; then
		eval "$(rbenv init -)"
	fi

	for version in "${ruby_versions[@]}"; do
		if [[ $(rbenv versions | grep "${version}") == "" ]]; then
			info "Rbenv: Ruby version ${version} is not installed yet, installing now"

			# Checks if pyenv has the correct version first
			info "Rbenv: Checking for ruby version ${version}"
			if [[ $(rbenv install --list | grep "${version}") == "" ]]; then
				fail "Rbenv: Ruby version ${version} was not found, please check it is valid and rbenv is up to date"
			else
				success "Rbenv: Ruby version ${version} was found"
			fi

			# Tries a normal install
			info "Rbenv: Attempting normal install now"
			if rbenv install "${version}" &> /dev/null ; then
				success "Rbenv: Ruby version ${version} is now installed"
			else
				fail "Rbenv: Ruby version ${version} failed to install"
			fi
		else
			success "Rbenv: Ruby version ${version} is already installed"
		fi
	done
